snsdata <- read.csv("~/Desktop/POs Big Data/snsdata.csv")
View(snsdata)
dados <- na.omit(snsdata)
dados$posts <- dados[,5]+dados[,6]+dados[,7]+dados[,8]+dados[,9]+dados[,10]+dados[,11]+dados[,12]+dados[,13]+dados[,14]+dados[,15]+dados[,16]+dados[,17]+dados[,18]+dados[,19]+dados[,20]+dados[,21]+dados[,22]+dados[,23]+dados[,24]+dados[,25]+dados[,26]+dados[,27]+dados[,28]+dados[,29]+dados[,30]+dados[,31]+dados[,32]+dados[,33]+dados[,34]+dados[,35]+dados[,36]+dados[,37]+dados[,38]+dados[,39]+dados[,40]
interesses <- dados[5:40]
interesses_z <- as.data.frame(lapply(interesses, scale))
pie(colSums(interesses[model$cluster==1,]),cex=0.5)
pie(colSums(interesses[model$cluster==2,]),cex=0.5)
model <- kmeans(interesses_z, centers = 5)
pie(colSums(interesses[model$cluster==1,]),cex=0.5)
pie(colSums(interesses[model$cluster==1,]),cex=0.5)
cbind(colSums(interesses[model$cluster==1,]))
pie(colSums(interesses[model$cluster==2,]),cex=0.5)
cbind(colSums(interesses[model$cluster==2,]))
pie(colSums(interesses[model$cluster==3,]),cex=0.5)
cbind(colSums(interesses[model$cluster==3,]))
pie(colSums(interesses[model$cluster==4,]),cex=0.5)
cbind(colSums(interesses[model$cluster==4,]))
pie(colSums(interesses[model$cluster==5,]),cex=0.5)
cbind(colSums(interesses[model$cluster==5,]))
pie(colSums(interesses[model$cluster==1,]),cex=0.5)
cbind(colSums(interesses[model$cluster==1,]))
pie(colSums(interesses[model$cluster==2,]),cex=0.5)
cbind(colSums(interesses[model$cluster==2,]))
pie(colSums(interesses[model$cluster==3,]),cex=0.5)
cbind(colSums(interesses[model$cluster==3,]))
pie(colSums(interesses[model$cluster==4,]),cex=0.5)
cbind(colSums(interesses[model$cluster==4,]))
pie(colSums(interesses[model$cluster==5,]),cex=0.5)
cbind(colSums(interesses[model$cluster==5,]))
set.seed(1234)
cbind(colSums(interesses[model$cluster==1,]))
cbind(colSums(interesses[model$cluster==2,]))
cbind(colSums(interesses[model$cluster==3,]))
cbind(colSums(interesses[model$cluster==4,]))
cbind(colSums(interesses[model$cluster==5,]))
a<-cbind(colSums(interesses[model$cluster==1,]))
standardization <- function(x){
return ((x - mean(x)) / sd(x) )
}
a_std <- standardization(a)
cbind(a_std)
b<-cbind(colSums(interesses[model$cluster==2,]))
b_std <- standardization(b)
cbind(b_std)
model$size
model$centers
model$size
cbind(model$centers)
cbind(model$centers)
cbind(model$centers)
cbind(model$centers)
model$cluster
model$size
pie(colSums(interesses[model$cluster==1,]),cex=0.5)
a<-c(1,2,3,4,10)
standardization(a)
z_a <-as.data.frame(lapply(a,scale))
z_a
scale(a)
a <- cbind(colSums(interesses[model$cluster==1,]))
scale(a)
pie(colSums(interesses[model$cluster==2,]),cex=0.5)
pie(colSums(interesses[model$cluster==3,]),cex=0.5)
pie(colSums(interesses[model$cluster==4,]),cex=0.5)
pie(colSums(interesses[model$cluster==5,]),cex=0.5)
install.packages("KernSmooth")
library(KernSmooth)
date()
con<-url("http://www.jhsph.edu","r")
x<-readLines(con)
x
head(x)
sub1 <-c("a","b","c", "d", "e")
sub1[1]
sub1[2:4]
sub1 <-c("a","b","c", "d", "e")
sub1[1]
sub1[2:4]
sub2<c(1,2,3,4,5,6,7,8,9,10)
sub2<-c(1,2,3,4,5,6,7,8,9,10)
sub2[sub2>3] # pegar somente os elementos maior que 3
logic_vector <- sub2 > 3
logic_vector
sub2[logic_vector]
x<-list(foo=1:4,bar =0.6)
x
> x
$foo
[1] 1 2 3 4
$bar
[1] 0.6
x[1]
x[[1]] # retorna o primeiro elemento sem a descricao da linha
x$bar
x$foo
x[1] # retorna o primeiro elemento, em formato do elemento orginal, neste caso lista
x[[1]] # retorna o primeiro elemento sem a descricao da linha
x$foo # retorna o elemento foo, toda a lista mas apenas os elementos
x[["foo"]] # retorna o elemento foo, toda a lista mas apenas os elementos
x["foo"]# retorna o elemento foo, toda a lista
x<-list(foo=1:4,bar =0.6, baz="hello")
x[c(1,3)] # pegar o item 1 e 3, neste caso a lista foo e a lista baz
x<-list(foo=1:4,bar =0.6, baz="hello")
name <-"foo"
x[[name]]
x$foo
[1] 1 2 3 4#
x<matrix(1:6,2,3)
x<-matrix(1:6,2,3)
x
x <-c(1,2,NA,4,NA,6)
bad <-is.na(x)
[2,]    2    4    6
x
bad
x[!bad]
x <-c(1,2,NA,4,NA,6)
y<-c(NA,1,2,3,4,5)
good <- complete.cases(x,y)
good
#
data(airquality)
airquality
good <-complete.cases(airquality)
airquality[good,]
install.packages("swirl")
library(swirl)
#Install the R Progroamming course
#swirl offers a variety of interactive courses, but for our purposes,
#you want the one called R Programming.
#Type the following from the R prompt to install this course:
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqtr(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z * 2 + 1000
my_div
getwd().
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
num_vect < 1
tf<-num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <-c(my_char, "Rodrigo")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
my_name <-c(my_char, "Rodrigo")
paste(1:3, c("X", "Y", "Z"), sep = "")
LETTERS
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0 ]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = , norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar]
vect["bar"]
vect[c("foo","bar")]
my_vector <-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <-my_vector
?matrix
my_matrix2 <- matrix( data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRU & C(TRUE, FALSE, FALSE)
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
wich(ints > 7)
which(ints > 7)
any(ints <0)
all(ints >0)
x = 10
if (x == 10){}
if (x == 10){ }
x <- 10
if(x == 10){
y <- 11
}
for(i in 1:10) {
print(i)
}
x<-c("a","b","c","d")
for(i in 1:4) {
print(x[i])
}
x<-matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j])
}
}
count <- 0
while (count < 10){
print(count)
count <- count + 1
}
add2 <-function(x,y){
#a funcao sempre retorna a ultima linha
x+y
}
add2(5,8)
use <- x > 10
use
use <- x > 10
above10 <- function(x){
use <- x > 10
x[use]
}
above10(1:30
)
columnmean <- function(y){
nc <-ncol(y) #numero de colunas
means <- numeric(nc) # criar um vetor numerico para armazenar as medias
for (i in nc) {
means[i] <- mean(y[,i])
}
}
columnmean(airquality)
columnmean(airquality)
columnmean <- function(y){
nc <-ncol(y) #numero de colunas
means <- numeric(nc) # criar um vetor numerico para armazenar as medias
for (i in nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
my_data <-data.frame(data = 1:100, nrow=10, ncol=10)
my_data
my_data
columnmean(my_data)
my_data <-data.frame(1:10,2,5)
View(my_data)
a<-c(1:10)
my_data <-data.frame(a,2,5)
?data.frame
matrix( data = 1:100, nrow = 10, ncol = 10)
a<-matrix( data = 1:100, nrow = 10, ncol = 10)
columnmean(a)
columnmean <- function(y){
nc <-ncol(y) #numero de colunas
means <- numeric(nc) # criar um vetor numerico para armazenar as medias
for (i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(a)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
View(h)
